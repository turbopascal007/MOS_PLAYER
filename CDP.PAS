{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                               MOS_PLAYER                                  บ
 ฬอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออน
 บ                GENERATED BY MRE (MOS RESOURCE EDITOR) v3.0                บ
 ฬอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออน
 บ Coded by Zuul as BouFFtou as Cheveau Frdric.                            บ
 บ Source Turbo Pascal v7.0 generated by MRE (MOS Resource Editor) v3.0.     บ
 บ Contact us on MOS Home's Page - http://www.multimania.com/mos             บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

{$M 65500,0,365520}                     {*Stack And Heap*}

Program MOS_PLAYER;                     {*Program Name*}

Uses Dos,                               {*BP7 Unit*}
     MOS_CRT, MOS_BAS, MOS_GPH,         {*Manage CRT, INI and graphics*}
     MOS_ASM, MOS_MSE, MOS_VESA,        {*Manage Assembler, mouse and VESA*}
     MOS_IPX, MOS_XMS, MOS_KBD,         {*Manage Networks, XMS and keyboard*}
     MOS_TOO, MOS_GAD, MOS_DSK,         {*Manage Tools, gadgets and disk*}

     MOS_GFX, MOS_BMP, MOS_VAR,         {*Manage Graphics and BMP*}
     MOS_WIN, MOS_MEN, MOS_EZR,         {*Manage Windows and Menus*}
     MOS_WAV, MOS_TSK, MOS_CDR,         {*Manage WAV Sounds, and MOS Tasks*}
     MOS_DIR, MOS_SYS, MOS_STR,         {*Manage Disk and System*}
     MOS_MEP, MOS_HAR, MOS_FIL,
     MOS_LIS, MOS_OCG, MOS_INI,
     MOS_HRR, MOS_TXT, MOS_COL,
     MOS_REQ, MOS_TIM, MOS_SWAP;        {*Manage Requesters and Swap Disk*}
{$IFNDEF FPC}

Const App_Name='MOS Player';
      App_Version='v1.10';
      App_Release='21.12.1999';

      ST_INIT       = 1;                {*Available states of the program*}
      ST_PLAY       = 2;
      ST_PAUSE      = 3;
      ST_STOP       = 4;
      ST_OPEN       = 5;
      ST_NODISK     = 6;

Var   LCDColor      :Integer;           {*LCD pen color*}
      Tmsf1         :TMSF;              {*Track information*}
      TrackPlayed   :Integer;           {*Current Track played*}
      MusicVolume   :Integer;           {*Music volume*}
      FirstPlay     :Boolean;           {*First song played*}
      StatusModified:Boolean;           {*Cd-Rom Status modified*}
      NoDiskInserted:Boolean;           {*Cd-Rom tray empty*}
      CurrentlyPlayed:Boolean;          {*Cd-Rom currently played*}
      TrackChanged  :Boolean;           {*Another track begin to be played*}
      RemainingTime :Integer;           {*Remaining time*}
      ResMP         :String;            {*Rsultat popup*}
      CDRomDrive    :Char;              {*Cd-Rom Drive*}
      Serial        :String;            {*Serial number of Disk*}
      List          :TList;             {*Tracks list*}
      SkinsTemp     :String;            {*Temporary file to build skins menu*}
      SkinsDrawer   :String;            {*Drawer that contain skins*}
      Skin          :String;            {*Used Skin*}
      Qtt_Skins     :Integer;           {*Count available skins*}
      A             :Integer;           {*Loop*}
      Cr,Cg,Cb      :Integer;           {*RGB for the LCD displaying*}
      State         :Byte;              {*Robot state*}
      Scroll        :Integer;           {*Scroll position*}
      AnimIndex     :Integer;           {*Animation image index*}

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                         PROCEDURE ABOUT CD PLAYER                         บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure Cdp_About;
Var W1            :TWindow;             {*Structure Fentre*}
    Even          :Byte;                {*Rception Evnements Fentre*}
    Exit_Flg      :Boolean;             {*Flag de Sortie*}
    Colors        :Longint;             {*Position et Taille de la Fentre*}
    Px1,Py1,Px2,Py2:Integer;
    MPal,MPal2,MPal3:TPalette256;       {*Save / Restore Palette*}
    Text1          :TText;

{************************* AFFICHE CONTENU FENETRE **************************}

Procedure REDRAW_FRAME;                 {*Dfinition Contenu Fentre*}
Begin
Win_Clip (Yes,W1);                      {*Clipping de la Fentre*}
StringBox(6, 11, W1.X2-T_Clip.X1-5, W1.Y2-T_Clip.Y1,1,CLBlack,No);
BMP_Show (7,12,640,480, 0,1,'CDP.BMP',$00A0);
Win_Clip (No,W1);                       {*Clipping de la Fentre*}
End;

{************************** PROCEDURE PRINCIPALE ****************************}

Begin
If Not Win_Init(0,0,351+16,198+12, $5541, Loc(63),W1) Then Exit;
Win_Sup(0,0,0,0,0,0,0,0,0,CLLightGrey,$08F6,W1);{*Supplment*}
Win_Draw(W1);                           {*Affiche la Fentre*}

REDRAW_FRAME;                           {*Affiche le Contenu de la Fentre*}
Exit_Flg:=False;                        {*Init Flag de Sortie*}

Repeat;
If Win_Ready(W1) Then                   {*Teste si Fentre Prte*}
   Begin
   End;

Even:=Win_Test(W1);
If Even=1 Then Exit_Flg:=True;          {*Fentre Ferme => Exit*}
If Even=9 Then REDRAW_FRAME;            {*Fentre Dplace => Rafficher Contenu*}
Until Exit_Flg=True;                    {*Flag de Sortie*}

Win_Kill(W1);                           {*Supprime Fentre*}
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                           PROCEDURE SAVE_CONFIG                           บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure SAVE_CONFIG;
Begin
Ini_SaveKey('CDP.CFG','Miscellaneous','Skin',File_StrSplit(Skin,$000C));
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                          PROCEDURE LOAD_CONFIG                            บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure LOAD_CONFIG;
Var St:String;
Begin
St:=Ini_LoadKey('CDP.CFG','Miscellaneous','Skin');
If St<>'' Then
   Begin
   Skin:=Dsk_ValideDirectory(Dsk_FExpand('SKINS'))+St;
   End;
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                            PROCEDURE CDP_INFO                             บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure CDP_INFO(Px,Py,Mode:Integer);
Var W1            :TWindow;             {*Window Structure*}
    Even          :Byte;                {*Get Windows Evens*}
    XOk,XCancel   :Boolean;             {*Exit Flags*}
    Tmsf2         :TMSF;                {*Track information*}
    Title         :String;              {*Window Title*}
    Text1         :TText;               {*Text displaying*}

{************************* DISPLAY WINDOW CONTENT ***************************}

Procedure REDRAW_FRAME;                 {*Define Window Content*}
Var St,Symbol,Res,SKinDesc:String;

Begin
Win_Clip(Yes,W1);                       {*Clipping Window*}
BMP_Show(000,000,300,300,0,110,Skin,$0080);
Font_Set('APLA.CHR',4);

If Mode=0 Then                          {*TRACK Information*}
   Begin
   Display_Define(Text1,10,10,-1,LCDColor,'',4,TJOnLeft,$0000,'Track number   : '+Str_FillZero(TrackPlayed,2));
   Display_Draw(Text1);
   Display_Define(Text1,10,20,-1,LCDColor,'',4,TJOnLeft,$0000,'Song name      : '+List_GetStringCell(List,TrackPlayed,2));
   Display_Draw(Text1);
   Display_Define(Text1,10,30,-1,LCDColor,'',4,TJOnLeft,$0000,'Author name    : '+List_GetStringCell(List,TrackPlayed,3));
   Display_Draw(Text1);
   Display_Define(Text1,10,40,-1,LCDColor,'',4,TJOnLeft,$0000,'Album name     : '+List_GetStringCell(List,TrackPlayed,4));
   Display_Draw(Text1);
   Display_Define(Text1,10,50,-1,LCDColor,'',4,TJOnLeft,$0000,'Music style    : '+List_GetStringCell(List,TrackPlayed,5));
   Display_Draw(Text1);

   Cdr_GetTrackLength(Tmsf1,TrackPlayed);
   St:=Str_FillZero(Tmsf1.Min,2)+':'+Str_FillZero(Tmsf1.Sec,2);
   Display_Define(Text1,10,60,-1,LCDColor,'',4,TJOnLeft,$0000,'Track length   : '+St);
   Display_Draw(Text1);

   Cdr_GetTrackRemainingTime(Tmsf1,TrackPlayed);
   St:=Str_FillZero(Tmsf1.Min,2)+':'+Str_FillZero(Tmsf1.Sec,2);
   Display_Define(Text1,10,70,-1,LCDColor,'',4,TJOnLeft,$0000,'Remaining time : '+St);
   Display_Draw(Text1);

   Cdr_GetTrackElapsedTime(Tmsf1,TrackPlayed);
   St:=Str_FillZero(Tmsf1.Min,2)+':'+Str_FillZero(Tmsf1.Sec,2);
   Display_Define(Text1,10,80,-1,LCDColor,'',4,TJOnLeft,$0000,'Elapsed time   : '+St);
   Display_Draw(Text1);

   StatusModified:=No;                  {*Reset modified status*}
   Case State of
      ST_PLAY  : Symbol:='Playing';
      ST_PAUSE : Symbol:='Paused';
      ST_STOP  : Symbol:='Stopped';
      End;
   Display_Define(Text1,10,90,-1,LCDColor,'',4,TJOnLeft,$0000,'Status         : '+Symbol);
   Display_Draw(Text1);
   End;

If Mode=1 Then                          {*CD-ROM Information*}
   Begin
   St:=Hard_GetSerialNumber(CdRomDrive);
   Delete(St,5,1);
   Display_Define(Text1,10,10,-1,LCDColor,'',4,TJOnLeft,$0000,'Disk Id      : '+St);
   Display_Draw(Text1);

   Cdr_GetDiskLength(Tmsf2);
   St:=Str_FillZero(Tmsf2.Min,2)+':'+Str_FillZero(Tmsf2.Sec,2);
   Display_Define(Text1,10,20,-1,LCDColor,'',4,TJOnLeft,$0000,'Disk Length  : '+St);
   Display_Draw(Text1);

   Display_Define(Text1,10,30,-1,LCDColor,'',4,TJOnLeft,$0000,'Tracks count : '+Str_FillZero(Cdr_CountTracks,2));
   Display_Draw(Text1);

   St:=List_GetStringCell(List,1,3); Res:=St;
   For A:=2 to Cdr_CountTracks do
      If St<>List_GetStringCell(List,A,3) Then Res:='(Misc authors)';
   Display_Define(Text1,10,40,-1,LCDColor,'',4,TJOnLeft,$0000,'Author name  : '+Res);
   Display_Draw(Text1);

   St:=List_GetStringCell(List,1,4); Res:=St;
   For A:=2 to Cdr_CountTracks do
      If St<>List_GetStringCell(List,A,4) Then Res:='(Misc albums)';
   Display_Define(Text1,10,50,-1,LCDColor,'',4,TJOnLeft,$0000,'Album name   : '+Res);
   Display_Draw(Text1);

   St:=List_GetStringCell(List,1,5); Res:=St;
   For A:=2 to Cdr_CountTracks do
      If St<>List_GetStringCell(List,A,5) Then Res:='(Misc styles)';
   Display_Define(Text1,10,60,-1,LCDColor,'',4,TJOnLeft,$0000,'Music style  : '+Res);
   Display_Draw(Text1);
   End;

If Mode=2 Then                          {*Skin Information*}
   Begin
   SkinDesc:=Copy(Skin,1,Pos('.',Skin))+'DES';

   St:=Str_Get(File_GetLine(SkinDesc,File_TestString(SkinDesc,'NAME;',1,1)),2,';');
   Display_Define(Text1,10,10,-1,LCDColor,'',4,TJOnLeft,$0000,'Name          : '+St);
   Display_Draw(Text1);

   St:=Str_Get(File_GetLine(SkinDesc,File_TestString(SkinDesc,'AUTHOR;',1,1)),2,';');
   Display_Define(Text1,10,20,-1,LCDColor,'',4,TJOnLeft,$0000,'Author        : '+St);
   Display_Draw(Text1);

   St:=Str_Get(File_GetLine(SkinDesc,File_TestString(SkinDesc,'CREATION DATE;',1,1)),2,';');
   Display_Define(Text1,10,30,-1,LCDColor,'',4,TJOnLeft,$0000,'Creation date : '+St);
   Display_Draw(Text1);

   St:=Str_Get(File_GetLine(SkinDesc,File_TestString(SkinDesc,'COPYRIGHT;',1,1)),2,';');
   Display_Define(Text1,10,40,-1,LCDColor,'',4,TJOnLeft,$0000,'Copyright     : '+St);
   Display_Draw(Text1);
   End;

Win_Clip(No,W1);                        {*Restore Normal Clipping*}
End;

{***************************** MAIN PROCEDURE *******************************}

Begin
Case Mode of                            {*Define Window title*}
   0 :Title:='Track Information';
   1 :Title:='Cd-Rom Information';
   2 :Title:='Skin Information';
   End;

If Not Win_Init(Px,Py,Px+LaF*60,Py+HaF1+HaF*11+5,$51D1,Title,W1) Then Exit;
Win_Sup(0,0,0,0,0,0,0,0,0,CLBlack,$0A50,W1);  {*Supplement*}
Win_Draw(W1);                           {*Display Window*}

REDRAW_FRAME;                           {*Display Window Content*}
XOk:=No; XCancel:=No;                   {*Init Exit Flags*}

Repeat;
If Win_Ready(W1) Then                   {*Test if Window Ready*}
   Begin                                {*Test Personnals Gadgets*}
   Win_Clip(Yes,W1);                    {*Clipping Window*}
   Win_Clip(No,W1);                     {*Restore Normal Clipping*}
   End;

Even:=Win_Test(W1);                     {*Get Windows Evens*}
If Even=1 Then XCancel:=Yes;            {*Window Closed   => Exit*}
If Even=9 Then REDRAW_FRAME;            {*Window Moved    => Display Content*}
Until (XOk) Or (XCancel);               {*Exit Flags*}

Win_Kill(W1);                           {*Close Window if Needs*}
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                             PROCEDURE MAIN                                บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure MAIN(Px,Py:Integer);
Const MaxInfoBox=13;                    {*InfoBox Quantity*}

Var W1            :TWindow;             {*Window Structure*}
    Even          :Byte;                {*Get Windows Evens*}
    XOk,XCancel   :Boolean;             {*Exit Flags*}
    But1,But2,But3,
    But4,But5,But6,
    But7,But8,But9,
    ButA,ButB,ButC,
    ButD,ButE,ButF:TButton;             {*Buttons Structure*}
    Sld1,Sld2     :TSlider;             {*Sliders Structure*}
    Cin2          :String;              {*Strings for Commands*}
    Inf           :Array[1..MaxInfoBox] Of TInfoBox;
    Loop          :Integer;
    Text1         :TText;
    Num           :Integer;             {*Dialog Requester*}

    Timer,Timer2  :TClock;              {*Timer informations*}
    Menu          :TPopupMenu;          {*Menu Popup*}
    ComboList     :TCombo;              {*Tracks Combo selection*}
    Result        :Integer;             {*Combo Result*}
    S1            :String;              {*Serial number.CDA*}

{******************** ENABLE OR DISABLE SOME MENUS POINTS *******************}

Procedure CDPMenusPoints(Status:Boolean);
Begin
Menu_EnablePoint(Menu,'CDP_MPOP.LIS',5, Status);
Menu_EnablePoint(Menu,'CDP_MPOP.LIS',9, Status);
Menu_EnablePoint(Menu,'CDP_MPOP.LIS',10,Status);
End;

{*********************** UPDATE PICTURES FOR BUTTONS ************************}

Procedure Define_ButtonPix;
Begin
But3.Ox1:=0;                            {PLAY => Grey}
But4.Ox1:=0;                            {PAUSE => Grey}
But5.Ox1:=0;                            {STOP => Blue}
But8.Ox1:=0;                            {OPEN => Grey}

Case State of
   ST_PLAY  : But3.Ox1:=46;             {PLAY => Blue}
   ST_PAUSE : But4.Ox1:=46;             {PAUSE => Blue}
   ST_STOP  : But5.Ox1:=46;             {STOP => Blue}
   ST_OPEN  : But8.Ox1:=46;             {OPEN => Blue}
   End;
End;

Procedure Update_ButtonPix;             {*Display buttons again*}
Begin
Define_ButtonPix;

Win_Clip(Yes,W1);
Button_Draw(But3);
Button_Draw(But4);
Button_Draw(But5);
Button_Draw(But8);
End;

{************************ REDRAW COMBO AND COMMANDS *************************}

Procedure REDRAW_COMBOANDCOMMAND;
Var Text1:TText;
Begin
Win_Clip(Yes,W1);                       {*Clipping Window*}
BMP_Show(186+1,061+6,293+1,082+6,186,061,Skin,$0080);
Display_Define(Text1,191+1,070-4+6,-1,LCDColor+2,'APLA.CHR',4,TJOnLeft,$0020,Cin2);
Display_Draw(Text1);

BMP_Show(009+1,064+6,163+1,078+6,009,064,Skin,$0080);
Display_Define(Text1,016+1,070-4+6,-1,0,'APLA.CHR',4,TJOnLeft,$0020,Combo_GetItem(TrackPlayed,ComboList));
Display_Draw(Text1);

Font_Set('LITT.CHR',4);
Combo (010,070,170, CLSky,CLSalmon,CLLIghtGrey,$027D,ComboList.Selected,ComboList);
End;

{***************************** REDRAW LCD INFOS *****************************}

Procedure REDRAW_LCDINFOS;
Var St:String;
    Symbol:String;

Begin
Win_Clip(Yes,W1);                       {*Clipping Window*}

Display_Define(Text1,15,10,-1,LCDColor,'LCDN.CHR',4,TJOnLeft,$0030,Str_FillZero(TrackPlayed,2));
Text1.LCDColor:=CLGreen; Display_Draw(Text1);

Cdr_GetTrackLength(Tmsf1,TrackPlayed);  {*Lenght*}
St:=Str_FillZero(Tmsf1.Min,2)+':'+Str_FillZero(Tmsf1.Sec,2);
Display_Define(Text1,54,14,-1,LCDColor,'LCSM.CHR',4,TJOnLeft,$0030,'Track Length  : '+St);
Text1.LCDColor:=CLGreen;
If State<>ST_NODISK Then Display_Draw(Text1);

Cdr_GetTrackRemainingTime(Tmsf1,TrackPlayed);{*Remaining*}
RemainingTime:=Tmsf1.Min*60+Tmsf1.Sec;
St:=Str_FillZero(Tmsf1.Min,2)+':'+Str_FillZero(Tmsf1.Sec,2);
Display_Define(Text1,54,24,-1,LCDColor,'LCSM.CHR',4,TJOnLeft,$0030,'Remaining Time: '+St);
Text1.LCDColor:=2;
If State<>ST_NODISK Then Display_Draw(Text1);

Cdr_GetTrackElapsedTime(Tmsf1,TrackPlayed);{*Elapsed*}
St:=Str_FillZero(Tmsf1.Min,2)+':'+Str_FillZero(Tmsf1.Sec,2);
Display_Define(Text1,54,34,-1,LCDColor,'LCSM.CHR',4,TJOnLeft,$0030,'Elapsed Time  : '+St);
Text1.LCDColor:=2;
If State<>ST_NODISK Then Display_Draw(Text1);

Display_Define(Text1,190,14,-1,15,'LCSM.CHR',4,TJOnLeft,$0030,'TRACKS COUNT '+Str_FillZero(Cdr_CountTracks,2));
Text1.LCDColor:=4; Display_Draw(Text1);

If CurrentlyPlayed Then Symbol:='๖' Else Symbol:=' ';
Display_Define(Text1,190,24,-1,LCDColor,'LCSM.CHR',4,TJOnLeft,$0031,Symbol);
Text1.LCDColor:=4; Display_Draw(Text1);

If NoDiskInserted Then Symbol:='-' Else Symbol:='I';
Display_Define(Text1,200,24,-1,LCDColor,'LCSM.CHR',4,TJOnLeft,$0031,Symbol);
Text1.LCDColor:=4; Display_Draw(Text1);

If (State<>ST_OPEN) And (State<>ST_NODISK) And (State<>ST_STOP) And (State<>ST_PAUSE) Then
   Begin
   St:=Str_Spaces(18)+List_GetStringCell(List,TrackPlayed,2)+' from '+List_GetStringCell(List,TrackPlayed,3)+
       ' of the '+List_GetStringCell(List,TrackPlayed,4)+' album ';
   Font_Set('LCSM.CHR',4);              {*Display Scrolltext*}
   Display_Define(Text1,14,51,-1,LCDColor,'LCSM.CHR',4,TJOnLeft,$0031,Copy(St,Scroll,18));
   Text1.LCDColor:=4; Display_Draw(Text1);
   Inc(Scroll);
   If Scroll>Length(St) Then Scroll:=1;
   End;

Win_Clip(No,W1);                        {*Restore Normal Clipping*}
End;

{************************ CLEAR SCROLLTEXTE ZONE ****************************}

Procedure CLEAR_SCROLLTEXT;
Begin
Win_Clip(Yes,W1);                       {*Clipping Window*}
BMP_Show(012+1,042+6,123+1,054+6,012,042,Skin,$0080);
End;

{**************************** CLEAR LCD WINDOW ******************************}

Procedure CLEAR_LCDWINDOW;
Begin
Win_Clip(Yes,W1);                       {*Clipping Window*}
BMP_Show(009+1,003+6,290+1,041+6,009,003,Skin,$0080);
End;

{************************* DISPLAY WINDOW CONTENT ***************************}

Procedure REDRAW_FRAME;                 {*Define Window Content*}
Begin
Win_Clip(Yes,W1);                       {*Clipping Window*}
BMP_Show(000,000,300,300,0,0,Skin,$00A0);

Button_Define (006,091,24,20, CLTextButton,CLBgButton,$0228,But2,Skin+'|'+Skin);
But2.Ox1:=0; But2.Oy1:=220; But2.Ox2:=22; But2.Oy2:=220;
Button_Draw(But2);
InfoBox (006,091,006+24,091+20, $0007,Inf[1],'Play previous track');

Button_Define (029,091,24,20, CLTextButton,CLBgButton,$02A8,But1,Skin+'|'+Skin);
But1.Ox1:=0; But1.Oy1:=239; But1.Ox2:=22; But1.Oy2:=239;
Button_Draw(But1);
InfoBox (029,091,029+24,091+20, $0007,Inf[2],'Play backward');

Button_Define (052,091,24,20, CLTextButton,CLBgButton,$0228,But3,Skin+'|'+Skin);
But3.Ox1:=0; But3.Oy1:=258; But3.Ox2:=22; But3.Oy2:=258;
Define_ButtonPix;                       {*Define right images for buttons*}
Button_Draw(But3);
InfoBox (052,091,052+24,091+20, $0007,Inf[3],'Play from the begining of track');

Button_Define (075,091,24,20, CLTextButton,CLBgButton,$0228,But4,Skin+'|'+Skin);
But4.Ox1:=0; But4.Oy1:=277; But4.Ox2:=22; But4.Oy2:=277;
Define_ButtonPix;                       {*Define right images for buttons*}
Button_Draw(But4);
InfoBox (075,091,075+24,091+20, $0007,Inf[4],'Pause / Resume audio');

Button_Define (098,091,24,20, CLTextButton,CLBgButton,$0228,But5,Skin+'|'+Skin);
But5.Ox1:=0; But5.Oy1:=296; But5.Ox2:=22; But5.Oy2:=296;
Define_ButtonPix;                       {*Define right images for buttons*}
Button_Draw(But5);
InfoBox (098,091,098+24,091+20, $0007,Inf[5],'Stop audio playing');

Button_Define (121,091,24,20, CLTextButton,CLBgButton,$02A8,But6,Skin+'|'+Skin);
But6.Ox1:=0; But6.Oy1:=315; But6.Ox2:=22; But6.Oy2:=315;
Button_Draw(But6);
InfoBox (121,091,121+24,091+20, $0007,Inf[6],'Play forward');

Button_Define (144,091,24,20, CLTextButton,CLBgButton,$0228,But7,Skin+'|'+Skin);
But7.Ox1:=0; But7.Oy1:=334; But7.Ox2:=22; But7.Oy2:=334;
Button_Draw(But7);
InfoBox (144,091,144+24,091+20, $0007,Inf[7],'Play next track');

Button_Define (167,091,24,20, CLTextButton,CLBgButton,$0228,But8,Skin+'|'+Skin);
But8.Ox1:=0; But8.Oy1:=353; But8.Ox2:=22; But8.Oy2:=353;
Define_ButtonPix;                       {*Define right images for buttons*}
Button_Draw(But8);
InfoBox (167,091,167+24,091+20, $0007,Inf[8],'Insert or eject the CD-Rom');

Button_Define (193,091,18,20, CLTextButton,CLBgButton,$0228,But9,Skin+'|'+Skin);
But9.Ox1:=0; But9.Oy1:=410; But9.Ox2:=17; But9.Oy2:=410;
If Not Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',1) Then Begin But9.Ox1:=17; But9.Ox2:=0; End;
Button_Draw(But9);                      {*Stop When Quit*}
InfoBox (193,091,193+18,091+20, $0007,Inf[9],'Stop music when quit|the CD player');

Button_Define (211,091,18,20, CLTextButton,CLBgButton,$0228,ButC,Skin+'|'+Skin);
ButC.Ox1:=0; ButC.Oy1:=429; ButC.Ox2:=17; ButC.Oy2:=429;
If Not Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',2) Then Begin ButC.Ox1:=17; ButC.Ox2:=0; End;
Button_Draw(ButC);                      {*Play Track Randomly*}
InfoBox (211,091,211+18,091+20, $0007,Inf[10],'Play tracks randomly');

Button_Define (229,091,18,20, CLTextButton,CLBgButton,$0228,ButD,Skin+'|'+Skin);
ButD.Ox1:=0; ButD.Oy1:=448; ButD.Ox2:=17; ButD.Oy2:=448;
If Not Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',3) Then Begin ButD.Ox1:=17; ButD.Ox2:=0; End;
Button_Draw(ButD);                      {*Loop on Track*}
InfoBox (229,091,229+18,091+20, $0007,Inf[11],'Loop playing on the same track');

Button_Define (249,091,24,20, CLTextButton,CLBgButton,$0228,ButA,Skin+'|'+Skin);
ButA.Ox1:=0; ButA.Oy1:=372; ButA.Ox2:=22; ButA.Oy2:=372;
Button_Draw(ButA);                      {*About MOS*}
InfoBox (249,091,249+24,091+20, $0007,Inf[12],'About '+Mos_Name+' '+Mos_Version);

Button_Define (272,091,24,20, CLTextButton,CLBgButton,$0238,ButB,Skin+'|'+Skin);
ButB.Ox1:=0; ButB.Oy1:=391; ButB.Ox2:=22; ButB.Oy2:=391;
ButB.Pointer.Value:='PENPEN.CUR';       {*About CD Player*}
Button_Draw(ButB);
InfoBox (272,091,272+24,091+20, $0007,Inf[13],'About '+App_Name+' '+App_Version);

Button (186+1,061+6,107,21, CLTextButton,CLBgButton,$0014,ButE,'_A');
ButE.Pointer.Value:='HELP';

Button_Define (164,069,16,16, CLTextButton,CLBgButton,$0228,ButF,Skin+'|'+Skin);
ButF.Ox1:=0; ButF.Oy1:=467; ButF.Ox2:=16; ButF.Oy2:=467;
Button_Draw(ButF);                      {*About MOS*}

Slider (140,052,230,62, 257,40,0,No,Sld1,MusicVolume);
Slider (240,052,290,62, 100,10,0,No,Sld2,Sld2.Psl);

Font_Set('LCSM.CHR',4);                 {*Define Popup Menu*}
Menu_Popup(Menu,W1.X1,W1.Y1,W1.X2,W1.Y2,No,'CDP_MPOP.LIS');
Font_Set('LITT.CHR',4);

REDRAW_COMBOANDCOMMAND;                 {*Titles and Author*}

Win_Clip(No,W1);                        {*Restore Normal Clipping*}

REDRAW_LCDINFOS;                        {*Affiche les informations Track*}
End;

{********************* GET INFORMATIONS FROM CD-ROM *************************}

Procedure GET_INFORMATIONS;
Begin
Cdr_GetDiskPos(Tmsf1);
If Tmsf1.Trk>0 Then                     {*Get infos on playing*}
   Begin
   If TrackPlayed<>Tmsf1.Trk Then TrackChanged:=Yes;
   TrackPlayed:=Tmsf1.Trk;              {*Set Track Played*}
   End;

If TrackChanged Then                    {*New track => Update data*}
   Begin
   ComboList.Selected:=TrackPlayed;
   REDRAW_COMBOANDCOMMAND;
   TrackChanged:=No;
   End;

Cdr_GetTrackRemainingTime(Tmsf1,TrackPlayed);{*Remaining*}
RemainingTime:=Tmsf1.Min*60+Tmsf1.Sec;

StatusModified:=No;                     {*Reset modified status*}
End;

{************************ UPDATE CD INFORMATIONS ****************************}

Procedure UPDATES_INFORMATIONS;
Var B:Boolean;                          {*Boolean misc informations*}
Begin
B:=Cdr_TestNoDisk;
If B<>NoDiskInserted Then
   Begin
   StatusModified:=Yes;
   NoDiskInserted:=B;
   If B Then State:=ST_NODISK
        Else State:=ST_STOP;
   CDPMenusPoints(Not B);                   {*Enable/Disable menu points*}
   CLEAR_LCDWINDOW;
   REDRAW_LCDINFOS;
   End;
B:=Cdr_TestDriveBusy;
If B<>CurrentlyPlayed Then Begin StatusModified:=Yes; CurrentlyPlayed:=B; End;

GET_INFORMATIONS;                       {*Get info from the Audio CD*}

If State=ST_PLAY Then REDRAW_LCDINFOS;  {*Affiche les informations Track*}
End;

{************************* GET THE CD MEDIA FILENAME ************************}

Function Get_CDName:String;
Begin
Serial:=Hard_GetSerialNumber(CdRomDrive);
Delete(Serial,5,1);
Serial:=Serial+'.CDA';
Get_CDName:=Get_SystemPath(SP_MEDIAS)+Serial;
End;

{*************************** SAVE CD MEDIA INFO *****************************}

Function Save_Media:Boolean;
Begin
Save_Media:=No;

If List_GetQttItems(List)<=0 Then Exit;
If List_GetStringCell(List,1,6)='00:00' Then Exit; {*Not really an audio CD-Rom*}

Serial:=Get_CDName;
If Not File_Create(Serial) Then         {*Acces impossible*}
   Begin
   File_Erase(Serial);
   Error(562);
   Exit;
   End;

List_Save(List,Serial);
Save_Media:=Yes;
End;

{*************************** LOAD CD MEDIA INFO *****************************}

Function Load_Media:Boolean;
Var St:String;
    Tmsf2:TMSF;
    A:Integer;

Begin
Serial:=Get_CDName;
List_Reset(List);                       {*Delete All list items*}
Combo_Clear(ComboList);

If Not File_TestExist(Serial) Then      {*Fichier non trouv !*}
   Begin
   For A:=1 to Cdr_CountTracks do
      Begin
      Cdr_GetTrackLength(Tmsf2,A);
      St:=Str_FillZero(A,2)+';Track '+Str_FillZero(A,2)+';Unknown;Unknown;Unknown;'+
          Str_FillZero(Tmsf2.Min,2)+':'+Str_FillZero(Tmsf2.Sec,2);
      List_AddItem(List,St,Insert_Append);
      End;
   Load_Media:=No;
   Save_Media;                          {*Save file instantanment*}
   End
Else                                    {*Fichier trouv*}
   Begin
   List_Load(List,Serial);
   Load_Media:=Yes;
   End;

For A:=1 to List.Qtt_Items do           {*Fill Combo*}
   Combo_AddItem(List_GetStringCell(List,A,2),ComboList);
End;

{************************* CDP MISCELLANEOUS ACTIONS ************************}

Procedure CDP_PLAYPREVTRACK;            {*Play Previous Track*}
Begin
Cdr_PlayPrevTrack;
Dec(TrackPlayed);
If TrackPlayed<1 Then TrackPlayed:=Cdr_CountTracks;
State:=ST_PLAY;
Update_ButtonPix;
REDRAW_LCDINFOS;
REDRAW_COMBOANDCOMMAND;
End;

Procedure CDP_PLAYAUDIO;                {*Play current track*}
Begin
If FirstPlay Then Cdr_PlayAudio;
Cdr_PlayTrack(TrackPlayed);
FirstPlay:=No;
StatusModified:=Yes;
State:=ST_PLAY;
Update_ButtonPix;
End;

Procedure CDP_PAUSERESUME;              {*Pause or resume audio*}
Begin
If Cdr_TestInPause Then
   Begin
   Cdr_PlayAudio;
   State:=ST_PLAY;
   End
Else
   Begin
   Cdr_PauseAudio;
   State:=ST_PAUSE;
   CLEAR_SCROLLTEXT;
   End;
Update_ButtonPix;
End;

Procedure CDP_STOPAUDIO;                {*Stop audio playing*}
Begin
Cdr_StopAudio;
StatusModified:=No;
State:=ST_STOP;
Update_ButtonPix;
Scroll:=1;
CLEAR_SCROLLTEXT;
REDRAW_LCDINFOS;
End;

Procedure CDP_PLAYBACKWARD;             {*Play Backward*}
Begin
Cdr_GetDiskPos(Tmsf1);
Dec(Tmsf1.Sec,3);
If Tmsf1.Sec<=0 Then Begin Tmsf1.Sec:=59; Dec(Tmsf1.Min); End;
If Tmsf1.Min<=0 Then Tmsf1.Min:=0;
State:=ST_PLAY;
Update_ButtonPix;
Cdr_PlayFrom(Tmsf1);
End;

Procedure CDP_PLAYFORWARD;              {*Play Forward*}
Begin
Cdr_GetDiskPos(Tmsf1);
Inc(Tmsf1.Sec,3);
If Tmsf1.Sec>=60 Then Begin Tmsf1.Sec:=0; Inc(Tmsf1.Min); End;
State:=ST_PLAY;
Update_ButtonPix;
Cdr_PlayFrom(Tmsf1);
End;

Procedure CDP_PLAYNEXTTRACK;            {*Play Next Track*}
Begin
Cdr_PlayNextTrack;
Inc(TrackPlayed);
If TrackPlayed>Cdr_CountTracks Then TrackPlayed:=1;
State:=ST_PLAY;
Update_ButtonPix;
REDRAW_LCDINFOS;
REDRAW_COMBOANDCOMMAND;
End;

Procedure CDP_OPENCLOSEDOOR;            {*Open Or Close Door*}
Begin
If Cdr_TestDoorOpen Then
   Begin
   Cdr_CloseDoor;
   State:=ST_STOP;
   End
Else
   Begin
   Cdr_OpenDoor;
   State:=ST_OPEN;
   End;

Update_ButtonPix;
End;

Procedure CDP_EXITPLAYER;               {*Exit Player*}
Begin
If Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',1) Then Cdr_StopAudio;
XOk:=Yes;
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                        PROCEDURE GET_SKINFILENAME                         บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Function GET_SKINFILENAME(SkinNumber:Integer):String;
Var FName,StCmp,St:String;
    Line:Integer;
Begin
GET_SKINFILENAME:='';                   {*De base...*}

FName:=Dsk_FExpand('CDP_SKIN.LIS');     {*Generic name of the Skin*}
StCmp:=Str_Get(File_GetLine(FName,SkinNumber),4,';');

For A:=1 to Qtt_Skins do                {*Search in temporary file*}
   Begin
   St:=SkinsDrawer+File_GetLine(SkinsTemp,A);
   Line:=File_TestString(St,'NAME;'+StCmp,1,1);
   If Line>0 Then GET_SKINFILENAME:=File_GetLine(SkinsTemp,A); {*New skin file*}
   End;
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                            PROCEDURE SET_SKIN                             บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure SET_SKIN(SkinNumber:Integer);
Var St,VCol:String;
    Num:Integer;
Begin
St:=GET_SKINFILENAME(SkinNumber);
If St='' Then                           {*Error searching skin !*}
   Begin
   Num:=1;
   Req_Dialog(App_Name+' '+App_Version,'Skin description not found in skin directory!','    _OK    ',Num);
   Exit;
   End;

VCol:=Str_Extract(Str_Get(File_GetLine(SkinsDrawer+St,File_TestString(SkinsDrawer+St,'LCD COLOR;',1,1)),2,';'),'(',')');
If VCol<>'' Then
   Begin
   Cr:=Str_S2L(Str_Get(VCol,1,','));    {*Set New LCD RGB values*}
   Cg:=Str_S2L(Str_Get(VCol,2,','));
   Cb:=Str_S2L(Str_Get(VCol,3,','));
   VESA_SetRGBPalette(LCDColor,Cr,Cg,Cb);
   End;

St:=SkinsDrawer+Copy(St,1,Pos('.',St))+'BMP';
If Not File_TestExist(St) Then          {*BMP skin not found*}
   Begin
   Num:=1;
   Req_Dialog(App_Name+' '+App_Version,'Skin image not found in skin directory!||"'+St+'"','    _OK    ',Num);
   Exit;
   End;
Skin:=St;                               {*Set and redraw skin*}

REDRAW_FRAME;
End;

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                         PROCEDURE LOAD_SKINFIRST                          บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Procedure LOAD_SKINFIRST;
Var SkinD,VCol:String;
    Num:Integer;
Begin
SkinD:=Copy(Skin,1,Pos('.',Skin))+'DES';
If Not File_TestExist(SkinD) Then       {*Error searching skin !*}
   Begin
   Num:=1;
   Req_Dialog(App_Name+' '+App_Version,'Skin description not found in skin directory!','    _OK    ',Num);
   Exit;
   End;

VCol:=Str_Extract(Str_Get(File_GetLine(SkinD,File_TestString(SkinD,'LCD COLOR;',1,1)),2,';'),'(',')');
If VCol<>'' Then
   Begin
   Cr:=Str_S2L(Str_Get(VCol,1,','));    {*Set New LCD RGB values*}
   Cg:=Str_S2L(Str_Get(VCol,2,','));
   Cb:=Str_S2L(Str_Get(VCol,3,','));
   VESA_SetRGBPalette(LCDColor,Cr,Cg,Cb);
   End;

If Not File_TestExist(Skin) Then        {*BMP skin not found*}
   Begin
   Num:=1;
   Req_Dialog(App_Name+' '+App_Version,'Skin image not found in skin directory!||"'+Skin+'"','    _OK    ',Num);
   Exit;
   End;
End;                                    {*Skin wil be displayed after...*}

{**************************** INITIALISE ALL ********************************}

Procedure INIT_ALL;
Var PopupSkins,St,St1:String;           {*For the skins popup menu*}
    A,Line:Integer;
Begin
State:=ST_STOP;                         {*Initialisation state*}

Sld2.Psl:=50;
MusicVolume:=255;
FirstPlay:=Yes;
LCDColor:=11;                           {*Light blue*}
StatusModified:=Yes;
Scroll:=1;
AnimIndex:=1;

NoDiskInserted:=Cdr_TestNoDisk;
CurrentlyPlayed:=Cdr_TestDriveBusy;
TrackPlayed:=1;
TrackChanged:=Yes;
Cdr_GetDiskPos(Tmsf1);
If Tmsf1.Trk>0 Then TrackPlayed:=Tmsf1.Trk; {*Set Track Played*}

CDPMenusPoints(Not NoDiskInserted);         {*Disable menus points*}

If CurrentlyPlayed  Then State:=ST_PLAY;{*Init program state*}
If NoDiskInserted   Then State:=ST_NODISK;
If Cdr_TestDoorOpen Then State:=ST_OPEN;

Time_InitTimer(Timer);                  {*Initialise the Timer*}
Time_InitTimer(Timer2);

CdRomDrive:=Hard_GetFirstCDRom;         {*Get the CD-Rom Drive*}

List_Define(List,'Track;Title;Author;Album;Style;Length',';',0,0,0,0, 100, 15,15,$1BED);
Combo_Init(ComboList);
ComboList.Selected:=TrackPlayed;

Load_Media;                             {*Load Cd Informations*}

Cin2:=List_GetStringCell(List,TrackPlayed,3);

SkinsDrawer:=Dsk_ValideDirectory(Dsk_FExpand('SKINS'));
Skin:=SkinsDrawer+'WINAMP.BMP';         {*De base*}
SkinsTemp:=File_BuildNextName(Get_SystemPath(SP_TEMP)+'SKINS.LIS');
File_GetDirectory(SkinsDrawer+'*.DES',SkinsTemp);
{File_Sort(Pt,1,Sort_AZ,1,';');       } {*Sort the skins by AZ*}
PopupSkins:='CDP_SKIN.LIS';
File_Erase(PopupSkins);
Qtt_Skins:=File_CountLines(SkinsTemp);
For A:=1 to Qtt_Skins do                {*Build popup menu file*}
   Begin
   St:=File_GetLine(SkinsTemp,A);
   St1:=SkinsDrawer+St;
   Line:=File_TestString(St1,'NAME;',1,1);
   St1:=File_GetLine(St1,Line);
   St1:=Str_Get(St1,2,';');
   St:=' ;1; ;'+St1;
   File_AppendString(PopupSkins,St);
   End;

Cr:=21;
Cg:=63;
Cb:=63;
VESA_SetRGBPalette(LCDColor,Cr,Cg,Cb);  {*Set default LCD RGB values*}

Load_Config;                            {*Load configuration*}
Load_SkinFirst;                         {*Load the skin first*}
End;

{****************** DISPLAY ANIMATION ON "ABOUT MOS" BUTTON *****************}

Procedure UPD;
Begin
If ButA.Flg_But Then Exit;
ButA.Ox1:=23+AnimIndex*23;
Button_Draw(ButA);                      {*About MOS*}
Inc(AnimIndex);
If AnimIndex>10 Then AnimIndex:=1;
End;

{*************************** TAG OR UNTAG OPTIONS ***************************}

Procedure CheckOption(Tag:Byte);
Var Tagged:Boolean;
Begin
Tagged:=Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',Tag);
Menu_SetCheckPoint(Menu,'CDP_OPTI.LIS',Tag,Not Tagged);

If Tag=1 Then
   If Tagged Then Begin But9.Ox1:=17; But9.Ox2:=0;  End
             Else Begin But9.Ox1:=0;  But9.Ox2:=17; End;
If Tag=2 Then
   If Tagged Then Begin ButC.Ox1:=17; ButC.Ox2:=0;  End
             Else Begin ButC.Ox1:=0;  ButC.Ox2:=17; End;
If Tag=3 Then
   If Tagged Then Begin ButD.Ox1:=17; ButD.Ox2:=0;  End
             Else Begin ButD.Ox1:=0;  ButD.Ox2:=17; End;

Button_Draw(But9);
Button_Draw(ButC);
Button_Draw(ButD);
End;

{************************* DEFINE AUDIO INFORMATION *************************}

Procedure DEFINE_AUDIOINFO;
Begin
S1:=Hard_GetSerialNumber(CdRomDrive);
Delete(S1,5,1);
S1:=S1+'.CDA';
Req_DefineAudioCD(200,200,'Audio CD manager',S1);{*Display an Audio CD manager*}
Load_Media;
REDRAW_COMBOANDCOMMAND;           {*Titles and Author*}
Win_Clip(Yes,W1);
Combo_Draw(ComboList);
End;

{***************************** MAIN PROCEDURE *******************************}

Begin
If Not Win_Init(Px,Py,Px+LaF*60,Py+HaF1+HaF*11+5,$55D9,App_Name+' '+App_Version,W1) Then Exit;
Win_Sup(100,50,250,200,79,60,639,479,0,CLGrey,$0A50,W1);
Win_Draw(W1);                           {*Display Window*}

INIT_ALL;                               {*Initialise All*}

REDRAW_FRAME;                           {*Display Window Content*}

Num:=1;
Req_Dialog(App_Name+' '+App_Version,'Please note that is a Beta version|'+
   'And some functions don''t work properly.','     _OK     ',Num);

XOk:=No; XCancel:=No;                   {*Init Exit Flags*}

Repeat;
If Win_Ready(W1) Then                   {*Test if Window Ready*}
   Begin                                {*Test Personnals Gadgets*}

   For Loop:=1 to MaxInfoBox do InfoBox_GetMsg(Inf[Loop]);

   Win_Clip(Yes,W1);                    {*Clipping Window*}
   If Button_GetMsg(But1,1) Then CDP_PLAYBACKWARD;
   If Button_GetMsg(But2,1) Then CDP_PLAYPREVTRACK;
   If Button_GetMsg(But3,1) Then CDP_PLAYAUDIO;
   If Button_GetMsg(But4,1) Then CDP_PAUSERESUME;
   If Button_GetMsg(But5,1) Then CDP_STOPAUDIO;
   If Button_GetMsg(But6,1) Then CDP_PLAYFORWARD;
   If Button_GetMsg(But7,1) Then CDP_PLAYNEXTTRACK;
   If Button_GetMsg(But8,1) Then CDP_OPENCLOSEDOOR;
   If Button_GetMsg(ButA,1) Then Req_Register;
   If Button_GetMsg(ButB,1) Then Cdp_About;
   If Button_GetMsg(But9,1) Then CheckOption(1);
   If Button_GetMsg(ButC,1) Then CheckOption(2);
   If Button_GetMsg(ButD,1) Then CheckOption(3);
   If (State<>ST_NODISK) And (State<>ST_OPEN) Then
      If Button_GetMsg(ButE,1) Then DEFINE_AUDIOINFO;{*Audio Information*}
   If Button_GetMsg(ButF,1) Then ;

   Result:=Combo_GetMsg(ComboList);     {*Combo Selected*}
   If Result>0 Then
      Begin
      Cin2:=List_GetStringCell(List,Result,3);
      TrackPlayed:=Result;
      REDRAW_COMBOANDCOMMAND;
      Cdr_PlayTrack(TrackPlayed);
      State:=ST_PLAY;
      Update_ButtonPix;
      REDRAW_LCDINFOS;
      End;

   If Slider_GetMsg(Sld1,1) Then Cdr_SetVolume(Sld1.Psl);
   Slider_GetMsg(Sld2,1);

   If (Time_TestTimer(20,Timer)) Or (StatusModified) Then
      UPDATES_INFORMATIONS;             {*Timer to get infos*}

   If Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',5) Then
      If Time_TestTimer(10,Timer2) Then UPD;{*Animations*}

   If RemainingTime<=0 Then             {*End of Track...*}
      Begin
      If Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',3) Then Cdr_PlayTrack(TrackPlayed) {*LOOP*}
         Else If Menu_TestCheckPoint(Menu,'CDP_OPTI.LIS',2) Then Cdr_PlayTrack(Random(Cdr_CountTracks)+1); {*RANDOM*}
      End;

   ResMP:=Menu_TestPopup(Menu);         {*Menu Popup*}
   If ResMP='2'   Then Req_Register;    {*Register MOS*}
   If ResMP='9'   Then DEFINE_AUDIOINFO;{*Audio Information*}
   If ResMP='3;1' Then Sys_Request (50,50,'CDP.INI');
   If ResMP='3;2' Then Req_Memory  (50,50,'Memory information');
   If ResMP='3;3' Then Req_Hardware(50,50,'Hardware information');
   If ResMP='5;1' Then CDP_Info(W1.X1,W1.Y1+HaF1+HaF*11+5+1,0);{*Track Information*}
   If ResMP='5;3' Then CDP_PLAYAUDIO;
   If ResMP='5;4' Then CDP_PAUSERESUME;
   If ResMP='5;5' Then CDP_STOPAUDIO;
   If ResMP='5;7' Then CDP_PLAYNEXTTRACK;
   If ResMP='5;8' Then CDP_PLAYPREVTRACK;
   If ResMP='5;9' Then CDP_PLAYFORWARD;
   If ResMP='5;10'Then CDP_PLAYBACKWARD;
   If ResMP='6;2' Then CDP_Info(W1.X1,W1.Y1+HaF1+HaF*11+5+1,2);{*Skin Information*}
   If ResMP='10'  Then CDP_Info(W1.X1,W1.Y1+HaF1+HaF*11+5+1,1);{*Cd-Rom Information*}
   If ResMP='12'  Then Dos_Shell;       {*Dos Shell*}
   If ResMP='13'  Then CDP_EXITPLAYER;  {*Exit*}

   For A:=1 to Qtt_Skins do
      Begin
      If ResMP='6;1;'+Str_L2S(A) Then SET_SKIN(A);
      End;

   Win_Clip(No,W1);                     {*Restore Normal Clipping*}
   End;

Even:=Win_Test(W1);                     {*Get Windows Evens*}
If Even=1 Then CDP_EXITPLAYER;          {*Window Closed   => Exit*}
If Even=9 Then REDRAW_FRAME;            {*Window Moved    => Display Content*}
Until (XOk) Or (XCancel);               {*Exit Flags*}

{Save_Media;                        }     {*Save Cd Information*}

Win_Kill(W1);                           {*Close Window if Needs*}
List_Kill(List);                        {*Kill the list*}
Combo_Kill(ComboList);                  {*Kill the combo*}
File_Erase(SkinsTemp);                  {*Delete temporary file*}
Save_Config;                            {*Save configuration*}
End;

{$ENDIF}

{ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
 บ                        MAIN PROGRAM (INITIALISATIONS)                     บ
 ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ}

Begin
Init_Application;                       {*Initialise all for application*}

{$IFNDEF FPC}
Oldexit:=ExitProc;                      {*Intercept Errors*}
SetJump(MyAddr);
ExitProc:=@ENTRY_INT24;

MAIN(70,90);                            {*Call Main Procedure*}
{$ENDIF}

Done_Application;                       {*Restore all for application*}
End.
